// <auto-generated />
using System;
using AngeAuth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace angeAuth.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AngeAuth.Models.SubVista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VistaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VistaId");

                    b.ToTable("subvistas", (string)null);
                });

            modelBuilder.Entity("AngeAuth.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaProximoCobro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UltimoMontoCobrado")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("AngeAuth.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsMaster")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("AngeAuth.Models.VariableCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("numeric");

                    b.Property<int>("MonthOffset")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RatePerHour")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("variablecharges", (string)null);
                });

            modelBuilder.Entity("AngeAuth.Models.Vista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("vistas", (string)null);
                });

            modelBuilder.Entity("angeAuth.Models.Cupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsosActuales")
                        .HasColumnType("integer");

                    b.Property<int>("UsosMaximos")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("cupones", (string)null);
                });

            modelBuilder.Entity("angeAuth.Models.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PagoMinimo")
                        .HasColumnType("numeric");

                    b.Property<string>("RUC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("empresas", (string)null);
                });

            modelBuilder.Entity("angeAuth.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PeriodoMeses")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("planes", (string)null);
                });

            modelBuilder.Entity("angeAuth.Models.PlanSubVista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlanVistaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanVistaId");

                    b.ToTable("plansubvistas", (string)null);
                });

            modelBuilder.Entity("angeAuth.Models.PlanVista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("planvistas", (string)null);
                });

            modelBuilder.Entity("AngeAuth.Models.SubVista", b =>
                {
                    b.HasOne("AngeAuth.Models.Vista", "Vista")
                        .WithMany("SubVistas")
                        .HasForeignKey("VistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vista");
                });

            modelBuilder.Entity("AngeAuth.Models.Subscription", b =>
                {
                    b.HasOne("angeAuth.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("AngeAuth.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AngeAuth.Models.VariableCharge", b =>
                {
                    b.HasOne("AngeAuth.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("AngeAuth.Models.Vista", b =>
                {
                    b.HasOne("AngeAuth.Models.User", "Usuario")
                        .WithMany("Vistas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("angeAuth.Models.Cupon", b =>
                {
                    b.HasOne("AngeAuth.Models.User", "Usuario")
                        .WithMany("Cupones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("angeAuth.Models.Empresa", b =>
                {
                    b.HasOne("AngeAuth.Models.User", "Usuario")
                        .WithMany("Empresas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("angeAuth.Models.PlanSubVista", b =>
                {
                    b.HasOne("angeAuth.Models.PlanVista", "PlanVista")
                        .WithMany("SubVistas")
                        .HasForeignKey("PlanVistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanVista");
                });

            modelBuilder.Entity("angeAuth.Models.PlanVista", b =>
                {
                    b.HasOne("angeAuth.Models.Plan", "Plan")
                        .WithMany("Vistas")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("AngeAuth.Models.User", b =>
                {
                    b.Navigation("Cupones");

                    b.Navigation("Empresas");

                    b.Navigation("Vistas");
                });

            modelBuilder.Entity("AngeAuth.Models.Vista", b =>
                {
                    b.Navigation("SubVistas");
                });

            modelBuilder.Entity("angeAuth.Models.Plan", b =>
                {
                    b.Navigation("Vistas");
                });

            modelBuilder.Entity("angeAuth.Models.PlanVista", b =>
                {
                    b.Navigation("SubVistas");
                });
#pragma warning restore 612, 618
        }
    }
}
